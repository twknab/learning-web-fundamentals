/* start time 9:20PM */


/* 1. Basic Styling */

/* CSS is used to style HTML. You'll see in this file different commenting and a different file ending. CSS files are pulled into HTMl and can change the appereance of HTML elements. */

 /* the area between the brackets in CSS is called a 'Declaration Block'. Each declaration must have a : after its declation, followed by a ; */

 p {  /* here we are styling an element */
 	color: blue;
 }

 .info {  /* here we are styling a class */
 	background-color: green;
 	border: 1px solid black;
 }

 #important {  /* here we are styling an #id */
 	font-size: 36px;
 }


/* it is in the order of 'element' -> 'class' -> '#id' in which CSS is prioritized. Here's a snippet from Coding Dojo:


		Now that we know a little more about how to use selectors, letâ€™s make a general list of the internal priorities for CSS:	

		element (1 point)
		.class (10 points)
		#id (100 points)
		
		This is the default priority order. In addition to this, specificity will also count, for example,  ul li will override li. W3C has made a decent table over how you should calculate internal weight:

		li            {...}  /* a=0 b=0 c=1 -> specificity =   1
		ul li         {...}  /* a=0 b=0 c=2 -> specificity =   2 
		ul ol li      {...}  /* a=0 b=0 c=3 -> specificity =   3 
		li.red        {...}  /* a=0 b=1 c=1 -> specificity =  11 
		ul ol li.red  {...}  /* a=0 b=1 c=3 -> specificity =  13 
		#list         {...}  /* a=1 b=0 c=0 -> specificity = 100 


*/


/* 2. block and inline and inline-block attributes */

/* Block elements take up space and create a line break, whereas inline elements just go right in a row without any line breaks */

/* by using the declaration we can remove the block element of block items such as p tags or div tags */

p {
	display:inline;  /* this puts things in a row */
}

div {
	display: inline;
}

/* furthermore, we can turn inline items, such as a tags, into block items */

a {
	display: block; /* block creates line breaks instead */
}

p { 
	display: inline-block;  /* this will put the two paragraphs in a line but retain their block level */
 }



/* 3. Layouts

/* by using float and div containers and different stylings you can really affect your layout */

/* here's a sweet fix for fixing any floating containers that break out of their parent */

/* give the parent the following declarations: */

#parent-wrapper {
	overflow: hidden;
	height: auto;
}

/* another way to do this is to use a clear fix -- this clear fix you do not apply to the parent, as a new sibling div beneath the parent, at the very end beneath your last div */

.clear {
	clear: both;
}


/* if you're trying to float some divs using inline-block, make sure to include the declaration, 'vertical-align: top;', as in the exmaple below */

p {
	display: inline-block;
	vertical-align: top;
}


/* 4. Fonts and font-family property */

/* Font

Font Type: The font-family property specifies the font for an element.

	The font-family property can hold several font names as a "fallback" system. If the browser does not support the first font, it tries the next font.

There are two types of font family names:

	family-name - The name of a font-family, like "times", "courier", "arial", etc.
	
	generic-family - The name of a generic-family, like "serif", "sans-serif", "cursive", "fantasy", "monospace".
	
	Start with the font you want, and always end with a generic family, to let the browser pick a similar font in the generic family, if no other fonts are available.

Web-safe fonts:

	There are about 11 fonts that are installed across pretty much all systems, termed web safe fonts because they are safe for use in your pages. The full list is as follows:

	Sans-serif: fonts without serifs: Verdana, Arial, Trebuchet MS
	Serif: fonts with serifs: Times new roman, Georgia
	Monospaced: fonts in which every glyph takes up the same space, like in computer code: Andale mono, Courier new
	Cursive: fonts that have a decorative, often handwritten-looking style: Comic Sans
	Fantasy: fonts that have a bold, often ornamental or quirky style, which are meant to be used for headings, not body copy: Impact

/*

/* believe it or not em is preferred over px */

/* Other attributes */
	
p {
	font-weight: 800;
	font-size: 0.8em;
	font-style: italic;
	position: relative; /* vs position: absolute; */
	top: 10px; /* tells relative positioning what to do */
	left: 10px;
	right: 10px;
	bottom: 10px;
	margin: 0 auto; /* this sets the top and bottom to 0px and sets the left and right to center */
}

/* Extras
An awesome resource on how to center elements: http://designshack.net/articles/css/how-to-center-anything-with-css/

An easy way to center an element inside a container:

HTML:

<div id="container">
  <div id="center-me">
  </div>
</div>

and in CSS: */

#container{
  width:200px;
  height:200px;
  background: blue;
  position:relative;
}
#center-me{
  background: red;
  height: 100px;
  width: 100px; 
  margin: auto;
  position: absolute;
  left: 0;
  bottom: 0;
  top: 0;
  right: 0;
}

/* Another way to horizontally center an element:

HTML:

<div id="container">
  <div id="center-me">
  </div>
</div>

and in CSS: */

#container{
  width:200px;
  height:200px;
  background: blue;
  position:relative;
}
#center-me{
  background: red;
  height: 100px;
  width: 100px; 
  margin: 0 auto;
}


/*

Another good thing to do is always do a CSS Reset when starting a new CSS file, because many browsers actually have their own basic CSS stylings. A 'reset' is a good idea and now you understand why in all of those WordPress css files the 'reset' portion. Here's some great links now:


		CSS Reset
		Here is a great explanation of what CSS resets are, why we use them, and some examples:

		http://perishablepress.com/a-killer-collection-of-global-css-reset-styles/

		Normalize
		A widely used alternative to CSS resets is normalize.css.  Normalize.css also covers HTML5 elements. Find more information about what it does and why it might be preferable to CSS resets here:

		https://github.com/necolas/normalize.css/

*/

/*

Custom Lists
	Removing or changing item markers:  list-style-type property. Possible values are: none, circle, square, upper-alpha, etc. The most commonly used value is none.

	If you want to use your custom item markers, you can do so with the  list-style-image property. This property takes a url as its value. Ex:
*/

ul{
  list-style-image : url('star.gif'); /* creates custom image in place of bullet point using 'list-style-image' */
}

ul{
  list-style-type: square; /* creates square in place of bullet point using, 'list-style-type' */
}

/* Other cool CSS properties:

	Links
	There are a couple of link related pseudo selectors that you should know.

	The first one is  :hover. (This selector can be used on ANY element, but is most commonly used with links.) The styles defined for this selector are only visible when the user hovers over the element.

	Ex: Suppose we want to see an underline when we hover over a link.

	HTML:

	<a href="#">An example link</a>

	CSS would be: */

	a{
	  text-decoration:none;
	}
	a:hover{
	  text-decoration: underline;
	}

	/*
	
	Other useful selectors:

	:link	a:link			Selects all unvisited links
	:visited	a:visited	Selects all visited links
	:active	a:active		Selects the active link (a link is "active" when it's clicked on)  

	Background
	The most commonly used background properties are:

	Property	Description
	background-color	Specifies the background color to be used. RGB and hex values are both supported, along with some English words.  
	Ex:  
	background-color: rgb(255, 255, 255);  
	or  
	background-color: black;  
	or  
	background-color: #00ff00;
	background-size	Specifies the size of the background images. 

	Possible values:  

	length	Sets the width and height of the background image. The first value sets the width, the second value sets the height. If only one value is given, the second is set to "auto"  
	Ex:  
	background-size: 400px 500px;


	percentage	Sets the width and height of the background image in percent of the parent element. The first value sets the width, the second value sets the height. If only one value is given, the second is set to "auto".  
	Ex:  
	background-size: 80% 80%;


	cover	Scale the background image to be as large as possible so that the background area is completely covered by the background image. Some parts of the background image may not be in view within the background positioning area  
	Ex:  
	background-size: cover;


	contain	Scale the image to the largest size such that both its width and its height can fit inside the content area.  
	Ex:  
	background-size: contain;


	background-repeat	Specifies how to repeat the background images.  
		Possible values:
		Value	Description
		repeat	The background image will be repeated both vertically and horizontally. This is the default.  
		repeat-x	The background image will be repeated only horizontally
		repeat-y	The background image will be repeated only vertically
		no-repeat	The background-image will not be repeated
		inherit	Specifies that the setting of the background-repeat property should be inherited from the parent element
		background-image	Specifies ONE or MORE background images to be used. It takes a URL as a value. Ex:  
		background-image: url('my_background_image.gif');  


	Border Radius
	This is what allows us to have rounded corners. The syntax is as follows:

	border-radius: 30px;
	The greater the number, the more rounded the corners will appear.

	You can go to border-radius and play with the size of the radius there to get exactly what you'd like.

Here's a link to a site with lots of properties: http://www.w3schools.com/cssref/

*/

/* Lego Concept: Put down big blocks of code first and then add your smaller chunks of code onto that. Basically break things into boxes and make things into smaller containers. This is the 'box model' and it just means that you don't want one large container with everything floating in it, but rather you want to have a large container, with smaller containers, with even smaller containers within that, getting more and more specific as you go. This allows things to move around a lot easier and will definitely help when you start getting into responsive web design. Use the lego concept or box model.  */



